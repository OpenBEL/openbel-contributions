/*
 * Copyright (C) 2014 Selventa, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package kampy;

import static java.lang.String.format;
import static org.openbel.framework.common.cfg.SystemConfiguration.*;

import java.util.*;

import org.openbel.framework.common.cfg.SystemConfiguration;
import org.openbel.framework.api.*;
import org.openbel.framework.api.internal.*;
import org.openbel.framework.api.internal.KAMCatalogDao.KamInfo;
import org.openbel.framework.common.enums.*;
import org.openbel.framework.core.df.*;

import java.io.*;

/**
 * Generates Python-friendly output for a KAM.
 *
 * @author Nick Bargnesi
 */
class Main {
    static final String PYNODE;
    static final String PYEDGE;
    static {
        PYNODE = "{'id': %d, 'function': '%s', 'label': '''%s'''}";
        PYEDGE = "{'id': %d, 'relationship': '%s', 'source': %d, 'target': %d}";
    }

    static void out(String msg) {
        System.out.println(msg);
    }

    public static void main(String... args) throws Exception {
        SystemConfiguration syscfg = createSystemConfiguration();
        String dburl = syscfg.getKamURL();
        String user = syscfg.getKamUser();
        String pass = syscfg.getKamPassword();
        String schema = syscfg.getKamCatalogSchema();
        String prefix = syscfg.getKamSchemaPrefix();
        out("Bootstrapped the BEL Framework.");

        DatabaseService ds = new DatabaseServiceImpl();
        DBConnection dbc = ds.dbConnection(dburl, user, pass);

        KAMCatalogDao catalog = new KAMCatalogDao(dbc, schema, prefix);
        KAMStore ks = new KAMStoreImpl(dbc);

        if (args.length != 2) {
            out("Printing available KAMs:");
            for (final KamInfo ki : ks.getCatalog()) {
                out("\t" + ki.getName());
            }
            System.exit(0);
        }

        String name = args[0];
        KamInfo ki = ks.getKamInfo(name);
        if (ki == null) {
            out("KAM \"" + name + "\" not found");
            System.exit(1);
        }
        out("Using KAM \"" + name + "\".");
        String filearg = args[1];
        File file = new File(filearg);
        FileWriter fw = new FileWriter(file);
        BufferedWriter bw = new BufferedWriter(fw);
        out("Using file \"" + file.getAbsolutePath() + "\".");

        KAMStoreDao dao = new KAMStoreDaoImpl(ki.getSchemaName(), dbc);

        fw.write("#!/usr/bin/env python3\n");
        fw.write("# coding: utf-8\n");
        fw.write(format("# generated by kampy on %s\n", new Date()));

        fw.write("\n");
        fw.write(format("# %s name\n", name));
        fw.write(format("name = '%s'\n", name));

        fw.write("\n");
        fw.write(format("# %s nodes\n", name));
        fw.write("def nodes():\n");
        AllocatingIterator<SimpleKAMNode> nodeiter = dao.iterateNodes();
        String nodestr;
        while (nodeiter.hasNext()) {
            SimpleKAMNode node = nodeiter.next();
            int id = node.getID();
            String function = node.getFunction().getDisplayValue();
            String lbl = node.getLabel();
            nodestr = format(PYNODE, id, function, lbl);
            fw.write("    yield ");
            fw.write(nodestr + "\n");
        }
        nodeiter.close();

        fw.write("\n");
        fw.write(format("# %s edges\n", name));
        fw.write("def edges():\n");
        AllocatingIterator<SimpleKAMEdge> edgeiter = dao.iterateEdges();
        String edgestr;
        while (edgeiter.hasNext()) {
            SimpleKAMEdge edge = edgeiter.next();
            int id = edge.getID();
            String rel = edge.getRelationship().getDisplayValue();
            int src = edge.getSourceID();
            int tgt = edge.getTargetID();
            edgestr = format(PYEDGE, id, rel, src, tgt);
            fw.write("    yield ");
            fw.write(edgestr + "\n");
        }
        edgeiter.close();
        bw.close();
    }

}

